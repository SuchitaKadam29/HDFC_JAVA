MongoDB:
--------
CREATE DATABASE
use  DATABASE_NAME;

Note: It will create database and switch to it.

CREATE COLLECTION

db.createCollection("employee"); // here employee is the collection/table name

DROP COLLECTION
db.collectionName.drop();


TO SHOW DATABASES:
show dbs;

TO SHOW COLLECTIONS:
show collections;


INSERT RECORD:
syn:- db.collectionName.insert({bson/json object});

Ex1: db.employee.insert({eid:101,ename:"javeed",salary:50000});  // it will insert only one record

In above Nosql query an auto-generated id with name "_id" will be generated which holds hexadecimal value as primary key in RDBMS. 


Ex2: db.employee.insertOne({eid:101,ename:"javeed",salary:50000});  // only one record


Inserting Multiple Records:
============================

Ex3: db.employee.insertMany([{eid:103,ename:"ford",salary:35000} , {eid:104,ename:"raju",salary:25000} , {eid:105,ename:"scott",salary:10000}]); 



Student Collection and Documents
===================================

use StudentDB;


db.student.insertMany(
          [
           {sid:101,sname:"raju",fee:5000,dob:"2000-09-01",city:"hyderabad",grade:'A'},
	   {sid:102,sname:"pratap",fee:4000,dob:"2001-03-21",city:"pune",grade:'B'},
	   {sid:103,sname:"sahil",fee:3000,dob:"2002-01-05",city:"hyderabad",grade:'B'},
	   {sid:104,sname:"omkar",fee:2000,dob:"2000-06-15",city:"chennai",grade:'A'},
	   {sid:105,sname:"tom",fee:7000,dob:"1999-12-23",city:"mumbai",grade:'C'},
	   {sid:106,sname:"jerry",fee:400,dob:"2010-12-12",city:"delhi",grade:'A'}


         ]);



Find One:

db.student.findOne();

Filters like where clause in SQL
----------------------------------

db.student.findOne({sname:"tom"}) // find record with sname = tom

Finding Multiple with filer:
-------------------------------
db.student.find({city:"hyderabad"}) // find all records with city = hyderabad









Operation	   Syntax	             Example	                             
Equality  {<key>:{$eg;<value>}}  db.mycol.find({"by":"tutorials point"}).pretty() 

sql: where by = 'tutorials point'

Less Than	{<key>:{$lt:<value>}}	db.mycol.find({"likes":{$lt:50}}).pretty()	
sql: where likes < 50

Less Than Equals	{<key>:{$lte:<value>}}	db.mycol.find({"likes":{$lte:50}}).pretty()	
sql: where likes <= 50

Greater Than	{<key>:{$gt:<value>}}	db.mycol.find({"likes":{$gt:50}}).pretty()	
sql: where likes > 50

Greater Than Equals	{<key>:{$gte:<value>}}	db.mycol.find({"likes":{$gte:50}}).pretty()	
sql: where likes >= 50

Not Equals	{<key>:{$ne:<value>}}	db.mycol.find({"likes":{$ne:50}}).pretty()	
sql: where likes != 50

Values in an array	{<key>:{$in:[<value1>, <value2>,……<valueN>]}}	db.mycol.find({"name":{$in:["Raj", "Ram", "Raghu"]}}).pretty()	
sql: Where name matches any of the value in :["Raj", "Ram", "Raghu"]


Values not in an array	{<key>:{$nin:<value>}}	db.mycol.find({"name":{$nin:["Ramu", "Raghav"]}}).pretty()	

sql: Where name values is not in the array :["Ramu", "Raghav"] or, doesn’t exist at all



Examples:
=========
studentdb> db.student.find({"fee":{$lt:5000}})

studentdb> db.student.find({"fee":{$gt:4000}})

studentdb> db.student.find({"fee":{$lte:5000}})

studentdb> db.student.find({"fee":{$ne:5000}})

studentdb> db.student.find({"sname":{$in:["sahil","tom","omkar"]}})

studentdb> db.student.find({"sname":{$nin:["sahil","tom","omkar"]}})

studentdb> db.student.find({$or:[{"sname":"sahil"},{"fee":5000}]})

studentdb> db.student.find({$and:[{"sname":"sahil"},{"fee":3000}]})

NOR:
====
 db.student.find({$nor:[{"sname":"sahil"},{"fee":3000}]})

Update Queries:
================

updateOne  OR  findOneAndUpdate():
------------------------------------

db.student.updateOne({sid:106},{$set:{fee:600,city:'noida'}}) // updating fee,city for sid=106

Note: we can use update() function also but it is deprecated.


db.student.findOneAndUpdate(
	{sname: 'tom'},
	{ $set: { fee: 3500,city:'banglore'}}
)


updateMany:
------------

studentdb> db.student.updateMany({fee:{$gt:4000}},{$set:{grade:'A+'}});


Starting in MongoDB 4.2:
==========================
db.collection.save()
 method is deprecated. Use db.collection.insertOne() or db.collection.replaceOne() instead.




replaceOne();
---------------

db.student.replaceOne({_id: ObjectId("640adc28f6d7a71ce0ac6f71")},{sid:106,sname:'John',fee:2500,dob:'2002-01-15',city:'delhi',grade:'B'})


remove();
---------
It will delete a record or set of records based on given condition or criteria

db.student.deleteMany({fee:{$gt:3000}}) // all records with fee > 3000 will be deleted

db.student.remove({sid:106});

Note: 
Collection.remove() is deprecated. Use deleteOne, deleteMany, findOneAndDelete




limit() and skip()
===================

studentdb> db.student.find().limit(3)  // show only 1st 3 records

studentdb> db.student.find().skip(3) // show remaining by skipping 1st 3 records


sort() for sorting 
-------------------
studentdb> db.student.find().sort({fee:1})  // it will show all records sorted by fee in ascending(1)

studentdb> db.student.find().sort({fee:-1}) // it will show all records sorted by fee in decending(-1)

Note: we can sort by fee or sname or grade or anything else




Aggregate functions or Group functions in MongoDB
===================================================

sum , avg , min , max


find sum of fee based on / group by city
studentdb> db.student.aggregate([{$group:{_id:"$city",fee:{$sum:"$fee"}}}]);

find avg group by city
studentdb> db.student.aggregate([{$group:{_id:"$city",fee:{$avg:"$fee"}}}]);

====================================================

Note: Below {$sum:1} is same as count(*)  is sql.

db.student.aggregate([{$group:{_id:"$city",fee:{$sum:1}}}]);  // find count of each fee

studentdb> db.student.aggregate([{$group:{_id:"$city",city:{$sum:1}}}]); // find count of each city

min
====
studentdb> db.student.aggregate([{ $group: { _id: "$city", fee: { $min: "$fee" } } }]);

max
=====
studentdb> db.student.aggregate([{ $group: { _id: "$city", fee: { $max: "$fee" } } }]);

studentdb> db.student.aggregate([{ $group: { _id: "$grade", fee: { $max: "$fee" } } }]);


first:
======
studentdb> db.student.aggregate([{ $group: { _id: "$city", fee: {$first:"$fee" } } }]);


last:
=====
studentdb> db.student.aggregate([{ $group: { _id: "$city", fee: {$last:"$fee" } } }]);

